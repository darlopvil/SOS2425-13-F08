{
	"info": {
		"_postman_id": "5789d68c-3ce6-4061-bbe6-035cf94a36e8",
		"name": "alvmornav",
		"description": "# 🚀 Get started here\n\nThis template guides you through CRUD operations (GET, POST, PUT, DELETE), variables, and tests.\n\n## 🔖 **How to use this template**\n\n#### **Step 1: Send requests**\n\nRESTful APIs allow you to perform CRUD operations using the POST, GET, PUT, and DELETE HTTP methods.\n\nThis collection contains each of these [request](https://learning.postman.com/docs/sending-requests/requests/) types. Open each request and click \"Send\" to see what happens.\n\n#### **Step 2: View responses**\n\nObserve the response tab for status code (200 OK), response time, and size.\n\n#### **Step 3: Send new Body data**\n\nUpdate or add new data in \"Body\" in the POST request. Typically, Body data is also used in PUT request.\n\n```\n{\n    \"name\": \"Add your name in the body\"\n}\n\n ```\n\n#### **Step 4: Update the variable**\n\nVariables enable you to store and reuse values in Postman. We have created a [variable](https://learning.postman.com/docs/sending-requests/variables/) called `base_url` with the sample request [https://postman-api-learner.glitch.me](https://postman-api-learner.glitch.me). Replace it with your API endpoint to customize this collection.\n\n#### **Step 5: Add tests in the \"Scripts\" tab**\n\nAdding tests to your requests can help you confirm that your API is working as expected. You can write test scripts in JavaScript and view the output in the \"Test Results\" tab.\n\n<img src=\"https://content.pstmn.io/fa30ea0a-373d-4545-a668-e7b283cca343/aW1hZ2UucG5n\" alt=\"\" height=\"1530\" width=\"2162\">\n\n## 💪 Pro tips\n\n- Use folders to group related requests and organize the collection.\n    \n- Add more [scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/) to verify if the API works as expected and execute workflows.\n    \n\n## 💡Related templates\n\n[API testing basics](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9a37a28-055b-49cd-8c7e-97494a21eb54&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[API documentation](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9c28f47-1253-44af-a2f3-20dce4da1f18&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[Authorization methods](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=31a9a6ed-4cdf-4ced-984c-d12c9aec1c27&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "42116184",
		"_collection_link": "https://sos2425-13.postman.co/workspace/SOS2425-13-~b3461b93-8aac-4e5b-8b9e-3a008d3dd1ea/collection/42116184-5789d68c-3ce6-4061-bbe6-035cf94a36e8?action=share&source=collection_link&creator=42116184"
	},
	"item": [
		{
			"name": "GET /forest-fires/loadInitialData",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 or 409\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 409]);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has a message\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"message\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains data array\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"data\");\r",
							"    pm.expect(jsonData.data).to.be.an('array');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:16078/api/v1/forest-fires/loadInitialData",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "16078",
					"path": [
						"api",
						"v1",
						"forest-fires",
						"loadInitialData"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET /forest-fires/loadAlvaroData",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.eql(200);\r",
							"});\r",
							"\r",
							"pm.test(\"La respuesta contiene un mensaje de éxito\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"message\");\r",
							"    pm.expect(jsonData.message).to.include(\"Álvaro\");\r",
							"});\r",
							"\r",
							"pm.test(\"Los datos están presentes y son un array\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"data\");\r",
							"    pm.expect(jsonData.data).to.be.an('array');\r",
							"    pm.expect(jsonData.data.length).to.be.above(0);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:16078/api/v1/forest-fires/loadAlvaroData",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "16078",
					"path": [
						"api",
						"v1",
						"forest-fires",
						"loadAlvaroData"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET /forest-fires",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response is an array\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.an('array');",
							"});",
							"",
							"pm.test(\"Each item has required fields\", function () {",
							"    const jsonData = pm.response.json();",
							"    if (jsonData.length > 0) {",
							"        jsonData.forEach(item => {",
							"            pm.expect(item).to.have.property(\"year\");",
							"            pm.expect(item).to.have.property(\"autonomous_community\");",
							"            pm.expect(item).to.have.property(\"number_of_accidents\");",
							"            pm.expect(item).to.have.property(\"percentage_of_large_fires\");",
							"        });",
							"    }",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:16078/api/v1/forest-fires",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "16078",
					"path": [
						"api",
						"v1",
						"forest-fires"
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "GET /forest-fires/2024/andalucia DOS PARAMETROS",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Código de estado es 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"La respuesta es un objeto con los campos esperados\", function () {\r",
							"    const data = pm.response.json();\r",
							"    pm.expect(data).to.be.an('object');\r",
							"    pm.expect(data).to.have.property(\"year\", 2024);\r",
							"    pm.expect(data).to.have.property(\"autonomous_community\", \"andalucia\"); // minúsculas\r",
							"    pm.expect(data).to.have.property(\"number_of_accidents\");\r",
							"    pm.expect(data).to.have.property(\"percentage_of_large_fires\");\r",
							"});\r",
							"\r",
							"pm.test(\"Los valores de los campos son correctos\", function () {\r",
							"    const data = pm.response.json();\r",
							"    pm.expect(data.number_of_accidents).to.eql(10034);\r",
							"    pm.expect(data.percentage_of_large_fires).to.eql(0.39);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:16078/api/v1/forest-fires/2024/Andalucia",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "16078",
					"path": [
						"api",
						"v1",
						"forest-fires",
						"2024",
						"Andalucia"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET /forest-fires/2016 POR FECHA",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Código de estado es 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"La respuesta es un array\", function () {\r",
							"    const data = pm.response.json();\r",
							"    pm.expect(data).to.be.an('array');\r",
							"});\r",
							"\r",
							"pm.test(\"Todos los elementos tienen el año 2016\", function () {\r",
							"    const data = pm.response.json();\r",
							"    data.forEach(item => {\r",
							"        pm.expect(item.year).to.eql(2016);\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Cada elemento tiene los campos esperados\", function () {\r",
							"    const data = pm.response.json();\r",
							"    data.forEach(item => {\r",
							"        pm.expect(item).to.have.property(\"autonomous_community\");\r",
							"        pm.expect(item).to.have.property(\"number_of_accidents\");\r",
							"        pm.expect(item).to.have.property(\"percentage_of_large_fires\");\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:16078/api/v1/forest-fires/2016",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "16078",
					"path": [
						"api",
						"v1",
						"forest-fires",
						"2016"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET /forest-fires/andalucia POR NUMERO DE INCENDIOS",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Parámetro esperado en la URL (cambia si pruebas otra comunidad)\r",
							"const communityParam = \"andalucia\";\r",
							"\r",
							"// Función para normalizar texto (quita tildes, mayúsculas y espacios)\r",
							"function normalize(str) {\r",
							"    return str.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\").trim().toLowerCase();\r",
							"}\r",
							"\r",
							"pm.test(\"Código de estado es 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"La respuesta es un array\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an(\"array\");\r",
							"});\r",
							"\r",
							"pm.test(`Todos los registros son de la comunidad '${communityParam}'`, function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    const expected = normalize(communityParam);\r",
							"\r",
							"    jsonData.forEach((item, index) => {\r",
							"        const actual = normalize(item.autonomous_community || \"\");\r",
							"        console.log(`Ítem ${index}:`, actual);\r",
							"        pm.expect(actual).to.eql(expected);\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:16078/api/v1/forest-fires/andalucia",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "16078",
					"path": [
						"api",
						"v1",
						"forest-fires",
						"andalucia"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET /api/v1/forest-fires?number_of_accidents=10034 BUSQUEDA POR NUMERO DE ACCIDENTE",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response should be an array\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an(\"array\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check if any record matches number_of_accidents=10034\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    const found = jsonData.some(record => record.number_of_accidents === 10034);\r",
							"    pm.expect(found).to.be.true;\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:16078/api/v1/forest-fires?number_of_accidents=10034",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "16078",
					"path": [
						"api",
						"v1",
						"forest-fires"
					],
					"query": [
						{
							"key": "number_of_accidents",
							"value": "10034"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "POST /forest-fires/2020/andalucia",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Código de estado 201 - creado\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Respuesta contiene mensaje de éxito\", function () {\r",
							"    const res = pm.response.json();\r",
							"    pm.expect(res).to.have.property(\"message\", \"Dato insertado correctamente\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"year\": 2020,\r\n  \"autonomous_community\": \"andalucia\",\r\n  \"number_of_accidents\": 18458,\r\n  \"percentage_of_large_fires\": 0.5\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:16078/api/v1/forest-fires",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "16078",
					"path": [
						"api",
						"v1",
						"forest-fires"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST /forest-fires ERROR 400",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Código de estado 400 - Bad Request\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"El error indica campos faltantes\", function () {",
							"    const res = pm.response.json();",
							"    pm.expect(res.error).to.include(\"Faltan campos\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"year\": 2023,\n  \"autonomous_community\": \"andalucia\",\n  \"number_of_accidents\": 8900\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:16078/api/v1/forest-fires",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "16078",
					"path": [
						"api",
						"v1",
						"forest-fires"
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "POST /forest-fires/2016 ERROR 405",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Código de estado 405 - Method Not Allowed\", function () {\r",
							"    pm.response.to.have.status(405);\r",
							"});\r",
							"\r",
							"pm.test(\"El error menciona que POST no está permitido\", function () {\r",
							"    const res = pm.response.json();\r",
							"    pm.expect(res.error).to.include(\"POST no permitido\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://localhost:16078/api/v1/forest-fires/2016",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "16078",
					"path": [
						"api",
						"v1",
						"forest-fires",
						"2016"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST /forest-fires ERROR 409",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Código de estado 409 - Conflict\", function () {\r",
							"    pm.response.to.have.status(409);\r",
							"});\r",
							"\r",
							"pm.test(\"El error menciona que el dato ya existe\", function () {\r",
							"    const res = pm.response.json();\r",
							"    pm.expect(res.error).to.include(\"Ya existe ese dato\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"year\": 2024,\r\n  \"autonomous_community\": \"Cataluña\",\r\n  \"number_of_accidents\": 8000,\r\n  \"percentage_of_large_fires\": 0.35\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:16078/api/v1/forest-fires",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "16078",
					"path": [
						"api",
						"v1",
						"forest-fires"
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT /forest-fires/2024/ceuta 200 OK",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Código de estado 200 - Actualización correcta\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Respuesta incluye mensaje de éxito\", function () {\r",
							"    const res = pm.response.json();\r",
							"    pm.expect(res.message).to.include(\"actualizado\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"year\": 2024,\r\n  \"autonomous_community\": \"ceuta\",\r\n  \"number_of_accidents\": 1234,\r\n  \"percentage_of_large_fires\": 0.5\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:16078/api/v1/forest-fires/2024/ceuta",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "16078",
					"path": [
						"api",
						"v1",
						"forest-fires",
						"2024",
						"ceuta"
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT /forest-fires/2024/andalucia ERROR 400",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Código de estado 400 - Bad Request\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Respuesta indica campos obligatorios faltantes\", function () {\r",
							"    const res = pm.response.json();\r",
							"    pm.expect(res.error).to.include(\"Faltan campos\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"year\": \"dosmilveinticuatro\",\r\n  \"autonomous_community\": \"andalucia\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:16078/api/v1/forest-fires/2024/andalucia",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "16078",
					"path": [
						"api",
						"v1",
						"forest-fires",
						"2024",
						"andalucia"
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT /forest-fires/2025/Andalucia ERROR 404",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Código de estado 404 - Not Found\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Respuesta indica que el dato no fue encontrado\", function () {\r",
							"    const res = pm.response.json();\r",
							"    pm.expect(res.error).to.include(\"Dato no encontrado\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"year\": 2025,\r\n  \"autonomous_community\": \"andalucia\",\r\n  \"number_of_accidents\": 99,\r\n  \"percentage_of_large_fires\": 0.5\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:16078/api/v1/forest-fires/2025/andalucia",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "16078",
					"path": [
						"api",
						"v1",
						"forest-fires",
						"2025",
						"andalucia"
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT /forest-fires/ ERROR 405",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Código de estado 405 - Method Not Allowed\", function () {\r",
							"    pm.response.to.have.status(405);\r",
							"});\r",
							"\r",
							"pm.test(\"Mensaje de error adecuado\", function () {\r",
							"    const res = pm.response.json();\r",
							"    pm.expect(res.error).to.include(\"PUT no permitido en el recurso base\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "http://localhost:16078/api/v1/forest-fires/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "16078",
					"path": [
						"api",
						"v1",
						"forest-fires",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT /forest-fires/2024/andalucia ERROR 409",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Código de estado 409 - Conflicto\", function () {\r",
							"    pm.response.to.have.status(409);\r",
							"});\r",
							"\r",
							"pm.test(\"Mensaje de conflicto correcto\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.error).to.include(\"No se puede modificar la clave primaria (año o comunidad)\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"year\": 2023,\r\n  \"autonomous_community\": \"ceuta\",\r\n  \"number_of_accidents\": 1234,\r\n  \"percentage_of_large_fires\": 0.5\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:16078/api/v1/forest-fires/2024/andalucia",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "16078",
					"path": [
						"api",
						"v1",
						"forest-fires",
						"2024",
						"andalucia"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE /forest-fires/2010 BORRAR DATO POR AÑO ERROR 404",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Eliminar datos por año o devolver 404 si no hay\", function () {\r",
							"    const status = pm.response.code;\r",
							"    const json = pm.response.json();\r",
							"\r",
							"    if (status === 200) {\r",
							"        pm.expect(status).to.eql(200);\r",
							"        pm.expect(json.message).to.include(\"eliminado\");\r",
							"    } else if (status === 404) {\r",
							"        pm.expect(status).to.eql(404);\r",
							"        pm.expect(json.message).to.include(\"No hay registros que coincidan\");\r",
							"    } else {\r",
							"        pm.expect.fail(`Código inesperado: ${status}`);\r",
							"    }\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:16078/api/v1/forest-fires/2010",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "16078",
					"path": [
						"api",
						"v1",
						"forest-fires",
						"2010"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE /forest-fires/hola ERROR 400 DEMASIADOS PARAMETROS",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"DELETE /forest-fires/2024/andalucia/hola - 400 Bad Request\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.error).to.include(\"Demasiados parámetros\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:16078/api/v1/forest-fires/2024/andalucia/hola",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "16078",
					"path": [
						"api",
						"v1",
						"forest-fires",
						"2024",
						"andalucia",
						"hola"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE /forest-fires/2024 BORRAR DATO POR AÑO",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"DELETE /forest-fires/2024 - 200 o 404\", function () {\r",
							"    const status = pm.response.code;\r",
							"    const jsonData = pm.response.json();\r",
							"\r",
							"    if (status === 200) {\r",
							"        pm.expect(jsonData.message).to.include(\"registro(s) eliminado(s)\");\r",
							"    } else if (status === 404) {\r",
							"        pm.expect(jsonData.error).to.include(\"No se encontraron registros\");\r",
							"    } else {\r",
							"        pm.expect.fail(`Código inesperado: ${status}`);\r",
							"    }\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:16078/api/v1/forest-fires/2024",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "16078",
					"path": [
						"api",
						"v1",
						"forest-fires",
						"2024"
					]
				}
			},
			"response": []
		},
		{
			"name": "Borrar datos",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Código de estado 200 - Eliminación exitosa\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Mensaje correcto de eliminación\", function () {",
							"    const jsonData = pm.response.json();",
							"    const match = jsonData.message.match(/Eliminados (\\d+) registros/);",
							"",
							"    pm.expect(match).to.not.be.null;",
							"    const count = parseInt(match[1]);",
							"    pm.expect(count).to.be.greaterThan(0); // O el número que esperas",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:16078/api/v1/forest-fires",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "16078",
					"path": [
						"api",
						"v1",
						"forest-fires"
					]
				},
				"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
			},
			"response": []
		},
		{
			"name": "Borrar datos por segunda vez ERROR 404",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Elimina todos los datos o devuelve 404 si no hay datos\", function () {\r",
							"    const status = pm.response.code;\r",
							"    const jsonData = pm.response.json();\r",
							"\r",
							"    if (status === 200) {\r",
							"        pm.expect(jsonData.message).to.include(\"Eliminados\");\r",
							"    } else if (status === 404) {\r",
							"        pm.expect(jsonData.error).to.include(\"No hay datos que eliminar\");\r",
							"    } else {\r",
							"        pm.expect.fail(`Código de estado inesperado: ${status}`);\r",
							"    }\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:16078/api/v1/forest-fires",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "16078",
					"path": [
						"api",
						"v1",
						"forest-fires"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "1"
		},
		{
			"key": "base_url",
			"value": "https://postman-rest-api-learner.glitch.me/"
		}
	]
}